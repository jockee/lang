data Maybe = Some a | None
data Result = Ok a | Err b
data UnitTestResult = TestFail a | TestPass

trait Functor f {
  map (a: b), f a => f b
  map => (a: b)
}

trait Applicative f {
  ap f (a: b), f a => f b
  pure a => f a
}

trait Monad m {
  bind m a, (a: b) => m b // m a, (a: m b) => m b
}

implement Functor for List {
  map _ [] = []
  map fl (h | hs) = fl h | map fl hs
}

implement Functor for Maybe {
  map _ None = None
  map fm (Some x) = Some (fm x)
}

implement Applicative for Maybe {
  ap (Some f) m = map f m
  ap _ _ = None
  pure a = Some a
}

implement Monad for Maybe {
  bind (Some a) k = k a
  bind None _ = None
}

implement Functor for Test {
  map _ Pass = Pass
  map fm (Fail x) = Fail (fm x)
}

implement Applicative for Test {
  ap (Fail f) m = map f m
  ap _ _ = Pass
  pure a = Fail a
}

implement Functor for Result {
  map fr (Ok a) = Ok (fr a)
  map _ (Err b) = Err b
}

implement Applicative for Result {
  ap (Ok f) a = map f a
  ap _ (Err b) = Err b
  pure a = Ok a
}

implement Monad for Result {
  bind (Ok a) k = k a
  bind _ (Err b) = Err b
}

// trait Num n {
//   odd? a, a => a
// }

trait Foldable f { // ok
  fold (a, b: a), a, f b => a // comm
  length xs = fold (acc x: acc + 1) 0 xs
  sum xs = fold (acc n: n + acc) 0 xs
  filter f xs = fold (acc x: (f x) ? (acc + [x]) : acc) [] xs
  reject f xs = fold (acc x: (f x) ? acc : (acc + [x])) [] xs
  product xs = fold (acc n: n * acc) 1 xs
  includes? x xs = fold (acc p: (p == x) ? true : false) false xs
  unique xs = fold (acc x: (includes? x acc) ? acc : (acc + [x])) [] xs
  last xs = reverse xs |> first
  find f xs = filter f xs |> first
  reverse xs = fold (acc x: x | acc) [] xs
  max xs = sort xs |> reverse |> first
  min xs = sort xs |> first
  all? f xs = length (filter f xs) == length xs
  any? f xs = length (filter f xs) > 0
  take n xs = fold (acc o: ((length acc) < n) ? (acc + [o]) : acc) [] xs
  drop n xs = reverse xs |> take (length xs - n) |> reverse
  span f xs = fold ((accA, accB) x: f x && empty? accB ? (accA + [x], accB) : (accA, accB + [x]) ) ([], []) xs
  break f xs = fold ((accA, accB) x: (!(f x) && empty? accB) ? (accA + [x], accB) : (accA, accB + [x]) ) ([], []) xs // doable with function composition of span (not . f)?
  dropWhile f xs = let (_, d) = span f xs: d
  takeWhile f xs = let (t, _) = span f xs: t
  dict xs = fold (acc (k, v): { acc | { k => v } }) {} xs
}

implement Foldable for List {
  fold _ initOrAcc [] = initOrAcc
  fold b initOrAcc (o | os) = fold b (b initOrAcc o) os
  scan _ initOrAcc [] = [initOrAcc]
  scan b initOrAcc (o | os) = initOrAcc | (scan b (b initOrAcc o) os)
}

implement Foldable for String {
  fold _ initOrAcc [] = initOrAcc
  fold c initOrAcc cs = foldString c initOrAcc (HFI toChars [cs])
  foldString _ initOrAcc [] = initOrAcc; foldString f initOrAcc (o | os) = foldString f (f initOrAcc o) os
}

implement Foldable for Dict {
  fold _ initOrAcc [] = initOrAcc
  fold m initOrAcc bs = foldDict m initOrAcc (HFI dictToList [bs])
  foldDict _ initOrAcc [] = initOrAcc
  foldDict b initOrAcc (o | os) = foldDict b (b initOrAcc o) os
  key? z xs = fold (acc (k, _): (k == z) ? true : false) false xs
}

trait Monoid t {
  concat [a] => a
  empty => a
  append a, a => a
}

implement Monoid for String {
  // concat (x | xs) = x | (concat xs)
  append a b = a | b
  empty = ""
}

implement Monoid for List {
  // concat (x | xs) = x | (concat xs)
  append a b = a | b
  empty = []
}

trait Stringable {
  toChars String => [String]
  join String, [String] => String
  join m xs = fold (acc x: length acc > 0 ? (acc | m | x) : x) "" xs
  capitalize s = let (x | xs) = toChars s: join "" ((uppercase x) | xs)
  uppercase c = (HFI uppercase [c])
  downcase c = (HFI downcase [c])
  // split String, String => [String]
  split d ss = split' (x: x == d) (toChars ss) |> map (x: join "" x) // (x |> String.join "")
  split' p s = case (dropWhile p s) {
                    []: []
                    s': let (w, s'') = break p s': w | split' p s''
                  }
}

implement Stringable for String {
  toChars s = (HFI toChars [s])
}

implement Monoid for Dict {
  // concat (x | xs) = x | (concat xs)
  append a b = { a | b}
  empty = {}
}
