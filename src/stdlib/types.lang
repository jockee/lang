data Maybe = Some a | None
data Result = Ok a | Err b

trait Functor f:
| fmap # (a: b), f a: f b;

trait Applicative f:
| ap # f (a: b), f a: f b
| pure # a: f a;

trait Monad m:
| bind # m a, (a: m b): m b;

implement Functor for Maybe:
| fmap _ None = None
| fmap f (Some x) = Some (f x);

implement Applicative for Maybe:
| ap (Some f) m  = fmap f m
| ap _ _ = None
| pure a = Some a;

implement Monad for Maybe:
| bind (Some a) k = k a
| bind None _ = None;

implement Functor for Result:
| fmap f (Ok a) = Ok (f a)
| fmap _ (Err b) = Err b;

implement Applicative for Result:
| ap (Ok f) a = fmap f a
| ap _ (Err b) = Err b
| pure a = Ok a;

implement Monad for Result:
| bind (Ok a) k = k a
| bind _ (Err b) = Err b;

trait Num n:
| odd? # a, a: a;

// implement Num for Integer:
// | odd? a b = (InternalFunction mod [a, b]) == 0
